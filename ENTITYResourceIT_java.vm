/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($TEST_SRC)};

#checkId($entity)
#set ( $uncapitalizedEntityName = ${fn.uncapitalize($entity.name)})
#set ( $isAutoIncremented = false ) 
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)
## --- Generate values test for all attributes
#set ( $values = $fn.buildValues($entity.attributes, 1) ) ## 1 is a step : (int:100, String:"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA", ...)
#set ( $values2 = $fn.buildValues($entity.attributes, 2) ) ## 2 is a step : (int:200, String:"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB", ...)

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
import org.junit.Test;
import ${ROOT_PKG}.commons.ConfigureRestAssured;


public class ${entity.name}ResourceIT extends ConfigureRestAssured {

	// Initialization --------------------------------
#set ( $listKeyAttributes = [] )
#foreach( $field in $entity.keyAttributes )
#set ( $boolean = $listKeyAttributes.add($fn.toUpperCase($field.name)) )
    private static $field.type $fn.toUpperCase($field.name)#if(!$field.isAutoIncremented()) = $values.getValue($field.name)#end; // Id or Primary Key
#end
	private long initialCount = 0;

## loop for attributes values
	private final static String DATA_BODY = "{"
#foreach( $attribute in $entity.attributes )
#if(!$attribute.isAutoIncremented())
#set ( $bodyValues = $values.getValue($attribute.name) )
## set null if is FK
#if($attribute.isFK())
#set ( $bodyValues = "null" )
#end
## if value contains " replace " by \"
#if($attribute.type == 'String')
#set ( $bodyValues = '"'+${bodyValues.replace('"', '\"')}+'"' )
#elseif($attribute.type == 'Date')
#set ( $bodyValues = '"\"" + '+${bodyValues}+' + "\""' )
#end
			+ "\"$attribute.name\":" + $bodyValues#if($foreach.count < $entity.attributes.size()) + ","#end  // "$attribute.databaseName" : $attribute.fullType
#else
#set ( $isAutoIncremented = true )
#end
#end
			+ "}";

## loop for attributes values update
	private final static String DATA_BODY_FOR_UPDATE = "{"
#foreach( $attribute in $entity.attributes )
#if(!$attribute.isAutoIncremented())
#set ( $bodyValues = $values2.getValue($attribute.name) )
## set value 1 of id 
#if($attribute.isKeyElement())
#set ( $bodyValues = $values.getValue($attribute.name) )
#else
#set ( $bodyValues = $values2.getValue($attribute.name) )
#end
## set null if is FK
#if($attribute.isFK())
#set ( $bodyValues = "null" )
#end
## if value contains " replace " by \"
#if($attribute.type == 'String')
#set ( $bodyValues = '"'+${bodyValues.replace('"', '\"')}+'"' )
#elseif($attribute.type == 'Date')
#set ( $bodyValues = '"\"" + '+${bodyValues}+' + "\""' )
#end
			+ "\"$attribute.name\":" + $bodyValues#if($foreach.count < $entity.attributes.size()) + ","#end  // "$attribute.databaseName" : $attribute.fullType
#end
#end
			+ "}";

	@Test
	public void test() {
		System.out.println("Test ${entity.name}Resource ");
		clear${entity.name}(); // Just to be sure it doesn't exist before insert

		try {
			initialCount = when().get("/${uncapitalizedEntityName}.count").then().extract().path("count");
	    	System.out.println("Initial count = " + initialCount );
		} catch (Exception e) {
			System.out.println("Initial count impossible, set default value = " + initialCount );
		}

		//--- CREATE
		System.out.println("- Create ${entity.name} : " + DATA_BODY);
		testPostForCreate();

		//--- FIND BY ID
		System.out.println("- Find ${entity.name} by id : "#foreach( $keyEntry in $listKeyAttributes )#if($foreach.count < $listKeyAttributes.size()) + "/"#end + $keyEntry#end );
		testGetById();

    	//--- UPDATE
		System.out.println("- Update ${entity.name} : " + DATA_BODY_FOR_UPDATE );
		testPutForUpdate(200);

		//--- DELETE
		System.out.println("- Delete ${entity.name} : " + DATA_BODY_FOR_UPDATE );
		testDelete(204); // Found and deleted

		//--- DELETE NOT FOUND
		System.out.println("- Delete ${entity.name} not found" );
		testDelete(404); // Not found

    	//--- UPDATE NOT FOUND
		System.out.println("- Update ${entity.name} not found" );
		testPutForUpdate(404);

		//--- NOT FOUND BY ID
		System.out.println("- Not found ${entity.name} by id" );
		testNotFoundGetById();

    	//--- SAVE
		System.out.println("- Save ${entity.name} (Update or Insert)");
		testPutForSave();

		//--- FIND ALL
		System.out.println("- Find all ${entity.name}");
		testGetFindAll();

		//--- COUNT
		System.out.println("- Count ${entity.name}");
		//testGetCount();


		//--- CLEAR
		clear${entity.name}();
	}

	/**
	 * Create ${entity.name}
	 */
	public void testPostForCreate() {
		// Test 201 created
#if($isAutoIncremented)	    $fn.toUpperCase($entity.keyAttribute.name) =#end given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY)
		.when()
			.post("${uncapitalizedEntityName}")
		.then()
			.statusCode(201)
#if($isAutoIncremented)
			.extract().path("$entity.keyAttribute.name")
#end			;
#if(!$isAutoIncremented)
		// Test 409 already exist
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY)
		.when()
			.post("${uncapitalizedEntityName}")
		.then()
			.statusCode(409);
#end
	}

	/**
	 * Test FIND ${entity.name} BY ID
	 */
	public void testGetById() {
		when()
			.get("${uncapitalizedEntityName}/"#foreach( $keyEntry in $listKeyAttributes )#if($foreach.count < $listKeyAttributes.size()) + "/"#end + $keyEntry#end)
		.then()
			.statusCode(200);

	}

	/**
	 * Test UPDATE ${entity.name}
	 */
	public void testPutForUpdate(int expectedStatusCode) {
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY_FOR_UPDATE)
		.when()
			.put("${uncapitalizedEntityName}/"#foreach( $keyEntry in $listKeyAttributes )#if($foreach.count < $listKeyAttributes.size()) + "/"#end + $keyEntry#end)
		.then()
			.statusCode(expectedStatusCode);
	}

	/**
	 * Test DELETE ${entity.name}
	 */
	public void testDelete(int expectedStatusCode) {
		when()
			.delete("${uncapitalizedEntityName}/"#foreach( $keyEntry in $listKeyAttributes )#if($foreach.count < $listKeyAttributes.size()) + "/"#end + $keyEntry#end)
		.then()
			.statusCode(expectedStatusCode);
	}

	/**
	 * Test NOT FOUND ${entity.name} BY ID
	 */
	public void testNotFoundGetById() {
		when()
			.get("${uncapitalizedEntityName}/"#foreach( $keyEntry in $listKeyAttributes )#if($foreach.count < $listKeyAttributes.size()) + "/"#end + $keyEntry#end)
		.then()
			.statusCode(404);
	}

	/**
	 * Test SAVE ${entity.name}
	 */
	public void testPutForSave() {
		// Test 201 Created
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY)
		.when()
			.put("${uncapitalizedEntityName}")
		.then()
			.statusCode(201);

		// Test#if(!$isAutoIncremented) 200#else 201#end Successful Update
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY_FOR_UPDATE)
		.when()
			.put("${uncapitalizedEntityName}")
		.then()
			.statusCode(#if(!$isAutoIncremented) 200 #else 201 #end);
	}

	/**
	 * Test FIND ALL ${entity.name}
	 */
	public void testGetFindAll() {
		when()
			.get("${uncapitalizedEntityName}")
		.then()
			.statusCode(200);
	}

	/**
	 * Test COUNT ${entity.name}
	 */
	public void testGetCount() {
		when()
			.get("${uncapitalizedEntityName}.count")
		.then()
			.statusCode(200)
			.body("count", equalTo(initialCount + 1));
	}

	/**
	 * To CLEAR ${entity.name}
	 */
	private void clear${entity.name}() {
		when().delete("${uncapitalizedEntityName}/"#foreach( $keyEntry in $listKeyAttributes )#if($foreach.count < $listKeyAttributes.size()) + "/"#end + $keyEntry#end);
	}

}
