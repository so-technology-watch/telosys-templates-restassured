/*
 * Created on $today.date ( Time $today.time )
 * Generated by $generator.name ( version $generator.version )
 */
package ${target.javaPackageFromFolder($TEST_SRC)};

#set( $uncapitalizedEntityName = $fn.uncapitalize($entity.name) )
## --- Referenced entities (e.g. "Book", "Country", "Author", ... )
#set( $referencedEntities = $entity.referencedEntityTypes() )## All referenced entities (PK and NON PK)

import static io.restassured.RestAssured.*;
import static org.hamcrest.CoreMatchers.equalTo;
import org.junit.Test;
import ${ROOT_PKG}.commons.ConfigureRestAssured;
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
import ${ROOT_PKG}.${ref}ResourceIT;
#end
#end


public class ${entity.name}ResourceIT extends ConfigureRestAssured {
	
	// Initialization --------------------------------
#foreach( $field in $entity.keyAttributes )
#if($field.type == 'String')
    private final static String ID_TEST = "12345678"; // Id or Primary Key
#elseif($field.type == 'short')
    private final static short ID_TEST = 12345; // Id or Primary Key
#else
    private final static int ID_TEST = 12345678; // Id or Primary Key
#end
#end
	private long initialCount = 0;

	private final static String DATA_BODY = "{"
## loop for attributes values
#set ($mapAttributes = {})
#foreach( $attribute in $entity.attributes )
#if( ${attribute.isKeyElement()} || ${attribute.isFK()} )
#set($mapAttributesUpdate[$attribute.name] = "ID_TEST")
			+ "\"${attribute.name}\":" + ID_TEST#if($foreach.count < $entity.attributes.size()) + ","#end
#elseif( ${attribute.type} == 'Integer' )
#set($mapAttributesUpdate[$attribute.name] = "2147483647")
			+ "\"${attribute.name}\":" + 2147483647#if($foreach.count < $entity.attributes.size()) + ","#end
#elseif( ${attribute.type} == 'Short' )
#set($mapAttributesUpdate[$attribute.name] = "32767")
			+ "\"${attribute.name}\":" + 32767#if($foreach.count < $entity.attributes.size()) + ","#end
#elseif( ${attribute.type} == 'String' )
#set($mapAttributesUpdate[$attribute.name] = '"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA"')
			+ "\"${attribute.name}\":" + "\"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\""#if($foreach.count < $entity.attributes.size()) + ","#end
#else
#set($mapAttributesUpdate[$attribute.name] = "null")
			+ "\"${attribute.name}\":" + "null"#if($foreach.count < $entity.attributes.size()) + ","#end
#end

#end
			+ "}";

	private final static String DATA_BODY_FOR_UPDATE = "{"
## loop for attributes values update 
#set ($mapAttributesUpdate = {})
#foreach( $attribute in $entity.attributes )
#if( ${attribute.isKeyElement()} || ${attribute.isFK()} )
#set($mapAttributesUpdate[$attribute.name] = "ID_TEST")
			+ "\"${attribute.name}\":" + ID_TEST#if($foreach.count < $entity.attributes.size()) + ","#end
#elseif( ${attribute.type} == 'Integer' )
#set($mapAttributesUpdate[$attribute.name] = "-2147483648")
			+ "\"${attribute.name}\":" + -2147483648#if($foreach.count < $entity.attributes.size()) + ","#end
#elseif( ${attribute.type} == 'Short' )
#set($mapAttributesUpdate[$attribute.name] = "-32768")
			+ "\"${attribute.name}\":" + -32768#if($foreach.count < $entity.attributes.size()) + ","#end
#elseif( ${attribute.type} == 'String' )
#set($mapAttributesUpdate[$attribute.name] = '"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB"')
			+ "\"${attribute.name}\":" + "\"BBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBBB\""#if($foreach.count < $entity.attributes.size()) + ","#end
#else
#set($mapAttributesUpdate[$attribute.name] = "null")
			+ "\"${attribute.name}\":" + "null"#if($foreach.count < $entity.attributes.size()) + ","#end
#end

#end
			+ "}";

	
	@Test
	public void test() {
		System.out.println("--- test ${entity.name}Resource ");
		clear${entity.name}(); // Just to be sure it doesn't exist before insert
		
		try {
			initialCount = when().get("/${uncapitalizedEntityName}.count").then().extract().path("count");
	    	System.out.println("Initial count = " + initialCount );
		} catch (Exception e) {
			System.out.println("Initial count impossible, set default value = " + initialCount );
		}
		// Initial create dependence
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
		${ref}ResourceIT.create${ref}();
#end
#end	
		
		//--- CREATE
		System.out.println("Create : " + DATA_BODY);
		testPost();
		
		//--- FIND BY ID
		System.out.println("Find by id" );
		testGetById();
		
    	//--- UPDATE
		System.out.println("Update : " + DATA_BODY_FOR_UPDATE );
		testPutForUpdate(200);
		
		//--- DELETE
		System.out.println("Delete : " + DATA_BODY_FOR_UPDATE );
		testDelete(204); // Found and deleted

		System.out.println("Delete not found" );
		testDelete(404); // Not found

    	//--- UPDATE NOT FOUND
		System.out.println("Update not found" );
		testPutForUpdate(404);

		//--- NOT FOUND BY ID
		System.out.println("Not found by id" );
		testNotFoundGetById();
		
    	//--- SAVE
		System.out.println("Save (Update or Insert)");
		testPutForSave();
		
		//--- FIND ALL
		System.out.println("Find all");
		testGetAll();
		
		//--- COUNT
		System.out.println("Count");
		testGetCount();
		
		
		System.out.println("Delete after test");
#foreach( $ref in $referencedEntities )
#if ( $ref != ${entity.name} )## to avoid multiple imports for the same service
		${ref}ResourceIT.clear${ref}();
#end
#end	
		clear${entity.name}();
	}
	
	/**
	 * Create car
	 */
	private void testPost() {
		// Test CREATE : 201 expected ----------------------------------------
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY)
		.when()
			.post("${uncapitalizedEntityName}")
		.then()
			.statusCode(201)
#foreach( $mapEntry in $mapAttributes.entrySet() )
			.body("$mapEntry.key", equalTo($mapEntry.value))
#end			;

		// Test CREATE : 409 already exist ----------------------------------------
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY)
		.when()
			.post("${uncapitalizedEntityName}")
		.then()
			.statusCode(409);
	}
	
	private void testGetById() {	
		// Test 200 ----------------------------------------
		when()
			.get("${uncapitalizedEntityName}/" + ID_TEST)
		.then()
			.statusCode(200)
#foreach( $mapEntry in $mapAttributes.entrySet() )
			.body("$mapEntry.key", equalTo($mapEntry.value))
#end			;

	}
		
	private void testNotFoundGetById() {	
		// Test 404 ----------------------------------------
		when()
			.get("${uncapitalizedEntityName}/" + ID_TEST)
		.then()
			.statusCode(404);
	}
	
	private void testPutForUpdate(int expectedStatusCode) {
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY_FOR_UPDATE)
		.when()
			.put("${uncapitalizedEntityName}/" + ID_TEST)
		.then()
			.statusCode(expectedStatusCode);
	}
	
	private void testDelete(int expectedStatusCode) {
		when()
			.delete("${uncapitalizedEntityName}/" + ID_TEST)
		.then()
			.statusCode(expectedStatusCode);
	}
	
	private void testPutForSave() {
		// Test 201 ----------------------------------------
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY)
		.when()
			.put("${uncapitalizedEntityName}")
		.then()
			.statusCode(201)
#foreach( $mapEntry in $mapAttributes.entrySet() )
			.body("$mapEntry.key", equalTo($mapEntry.value))
#end			;
		
		// Test 200 ----------------------------------------
		given()
			.contentType(CONTENT_TYPE_JSON)
			.body(DATA_BODY_FOR_UPDATE)
		.when()
			.put("${uncapitalizedEntityName}")
		.then()
			.statusCode(200)
#foreach( $mapEntry in $mapAttributesUpdate.entrySet() )
			.body("$mapEntry.key", equalTo($mapEntry.value))
#end			;
	}
	
	private void testGetAll() {
		// Test 200 ----------------------------------------
		when()
			.get("${uncapitalizedEntityName}")
		.then()
			.statusCode(200);
	}
	
	public static void testGetCount() {
		// Test 200 ----------------------------------------
//		when()
//			.get("${uncapitalizedEntityName}.count")
//		.then()
//			.statusCode(200)
//			.body("count", equalTo(initialCount + 1));		
	}
	
	public static void create${entity.name}() {
	given()
		.contentType(CONTENT_TYPE_JSON)
		.body(DATA_BODY)
	.when()
		.put("${uncapitalizedEntityName}");
	}
	
	public static void clear${entity.name}() {
		when().delete("${uncapitalizedEntityName}/" + ID_TEST);
	}

}

